import com.android.build.gradle.api.BaseVariant

apply plugin: 'com.android.application'
apply plugin: 'walle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jakewharton.butterknife'

android {
    signingConfigs {
        mySigned {
            keyAlias 'apk@shell'
            keyPassword '123456'
            storeFile file('apkshell.jks')
            storePassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.maoxin.apkshell"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        if (isARouter.toBoolean()) {
            kapt {
                arguments {
                    arg("AROUTER_MODULE_NAME", project.getName())
                }
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.mySigned
        }
        debug {
            signingConfig signingConfigs.mySigned
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.java_version
        targetCompatibility rootProject.ext.java_version
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = rootProject.ext.java_version
        targetCompatibility = rootProject.ext.java_version
    }
}

walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")//指定渠道包输出路径
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}-${flavorName}.apk'
//定制渠道包名
    //     apkFileNameFormat 配置

    //      projectName - 项目名字
    //     appName - App模块名字
    //     packageName - applicationId (App包名packageName)
    //     buildType - buildType (release/debug等)
    //     channel - channel名称 (对应渠道打包中的渠道名字)
    //     versionName - versionName (显示用的版本号)
    //     versionCode - versionCode (内部版本号)
    //     buildTime - buildTime (编译构建日期时间)
    //     fileSHA1 - fileSHA1 (最终APK文件的SHA1哈希值)
    //     flavorName - 编译构建 productFlavors 名

    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel")
    //configFile = new File("${project.getProjectDir()}/config.json")
}

// 根据不同的applicationId来配置不同的channelFile／configFile
afterEvaluate {
    project.android.applicationVariants.all { BaseVariant variant ->
        variant.assemble.doFirst {
            if (variant.buildType.name.equalsIgnoreCase("debug")) {
                project.walle.apkOutputFolder = new File("${project.buildDir}/outputs/channels_debug")
                project.walle.channelFile = new File("${project.getProjectDir()}/channel_debug")
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.material:material:1.2.0-alpha02'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation project(':exoplayer_plugins')
    implementation group: 'com.googlecode.mp4parser', name: 'isoparser', version: '1.1.22'
    implementation 'com.github.bumptech.glide:glide:4.10.0'

    implementation project(':appinstaller')


    //butterknife 组件
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"

    //kotlin 组件
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"//协成
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.anko:anko:$anko_version"

    //Leakcanary 组件
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

    //CameraX 组件
    def camerax_version = "1.0.0-alpha06"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"

    // Lifecycle and LiveData
    def lifecycle_version = '2.1.0'
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Navigation library
    def nav_version = "2.1.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.google.dagger:dagger-android:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //美团walle
    implementation 'com.meituan.android.walle:library:1.1.6'

    if (isARouter.toBoolean()) {
        //组件ARouter
        implementation "com.alibaba:arouter-api:1.5.0"
        kapt "com.alibaba:arouter-compiler:1.2.2"
    }

//    if (isWMRouter.toBoolean()) {
//        //美团路由
//        def wmrouter_version = "1.2.0"
//        implementation "com.sankuai.waimai.router:router:$wmrouter_version"
//        kapt "com.sankuai.waimai.router:compiler:$wmrouter_version"
//    }
}
